package com.team404.common.util.aop;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.AfterThrowing;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.springframework.stereotype.Component;

@Aspect//AOP를 적용시킬 클래스
@Component
public class LogAdvice {
	
	//맨앞에 있는 *는 접근제어자를 의미, 맨 뒤에 *는 메서드를 의미함
	
	//@Before("execution(* com.team404.controller.*Controller.*(..))")
//	@Before("execution(* com.team404.*.service.*ServiceImpl.*(..))")
	public void beforeLog() {
		
		System.out.println("--------메서드 실행전--------");
	}
	
//	@After("execution(* com.team404.*.service.*ServiceImpl.*(..))")
	public void afterLog() {
		System.out.println("--------메서드 실행이후--------");
	}
	
	//에러가 발생했을 때 동작 (throwing = "e") -에러를 처리할 변수
	//@AfterThrowing(pointcut="execution(* com.team404.*.service.*ServiceImpl.*(..))", throwing = "e")
	public void errorLog(Exception e) {
		System.out.println("에러로그 : " + e);
		
	}
	//before, after, afterThrowing 세가지를 한번에 처리할 수 있게 해주는 Around
	//메서드 실행 권한을 가지고,타겟메서드랑 접목시켜 사용
	//규칙 - 반환은 Object로 받는다, 매개변수로 메서드의 실행시점을 결정짓는 ProceedingJoinPoint를 선언합니다.
	@Around("execution(* com.team404.*.service.*ServiceImpl.*(..))")
	public Object aroundLog(ProceedingJoinPoint jp) {
		long start = System.currentTimeMillis();
		
		System.out.println(jp.getTarget());
		System.out.println(jp.getSignature());
		
		Object result =null;			
		try {
			result = jp.proceed();
		} catch (Throwable e) {
			// TODO Auto-generated catch block
			System.out.println("에러로그 : "+e);
			e.printStackTrace();
		}//타겟메서드 실행
		
		long end = System.currentTimeMillis();
		System.out.println("메서드 소요시간 : "+(end - start)*0.001);
		
		return result; //proceed()의 결과를 반환해야 메서드의 정상 흐름으로 돌아갑니다
	}
}
